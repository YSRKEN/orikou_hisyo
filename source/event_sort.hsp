/* ソート一覧に関するイベント処理 */

//*ソート一覧を表示する
*show_sort_list
	gsel kSortListWindowID, 2
	show_window(kSortListWindowID) = TRUE
return

//*ソート一覧に追加する
*add_sort_list
	// 艦娘
	if(sort_kind == 0){
		if((scene_result(0) == "編成画面") && (scene_result(1) == "ソート画面") && (sort_list_size(0) < kMaxSortPages)){
			sort_list(0) += NowTime() + "\n"
			gsel kSortListBufferID
			pos sort_list_size(0) * kSortWX, 0
			gcopy kMainBufferID, kSortPX, kSortPY, kSortWX, kSortWY
			gsel kSortListWindowID
			objprm sort_index_id, sort_list(0)
			sort_list_size(0)++
			title "ソート一覧(艦娘," + sort_list_size(0) + "枚)"
		}
	}
	// 装備
	if(sort_kind == 1){
		if((scene_result(1) == "廃棄画面") && (sort_list_size(1) < kMaxSort2Pages)){
			sort_list(1) += NowTime() + "\n"
			gsel kSort2ListBufferID
			pos sort_list_size(1) * kSort2WX, 0
			gcopy kMainBufferID, kSort2PX, kSort2PY, kSort2WX, kSort2WY
			gsel kSortListWindowID
			objprm sort_index_id, sort_list(1)
			sort_list_size(1)++
			title "ソート一覧(装備," + sort_list_size(1) + "枚)"
		}
	}
	// 基地
	if(sort_kind == 2){
		if((scene_result2(0) == "基地航空隊") && (instr(scene_result2(1),, "航空隊") != -1) && (sort_list_size(2) < kMaxSort3Pages)){
			sort_list(2) += NowTime() + "\n"
			gsel kSort3ListBufferID
			pos sort_list_size(2) * kBaseAirWX, 0
			gcopy kMainBufferID, kBaseAirPX, kBaseAirPY, kBaseAirWX, kBaseAirWY
			gsel kSortListWindowID
			objprm sort_index_id, sort_list(2)
			sort_list_size(2)++
			title "ソート一覧(基地," + sort_list_size(2) + "枚)"
		}
	}
return

//*ソート一覧からまとめ画像を生成する
*make_sort_list
	if(sort_list_size(sort_kind) <= 0) :return
	PutLog "【ソート一覧画像】"
	// 基地航空隊は特別扱い
	if(sort_kind == 2){
		buffer kTempBufferID, sort_list_size(sort_kind) * kBaseAirWX, kBaseAirWY
		for k, 0, sort_list_size(sort_kind)
			pos k * kBaseAirWX, 0
			gcopy kSort3ListBufferID, k * kBaseAirWX, 0, kBaseAirWX, kBaseAirWY
		next
		file_name = NowTime() + ".png"
		PicSave file_name
		PutLog "ファイル名：" + file_name
		return
	}
	// 艦娘・装備の場合
	if(sort_type == 0){
		// 普通のバージョン(練度をベタッと並べていく)
		//出力用バッファを準備
		LX = (sort_width_index + 1)
		LY = sort_list_size(sort_kind) / (sort_width_index + 1)
		if(sort_list_size(sort_kind) \ (sort_width_index + 1) != 0) :LY++
		if(sort_kind == 0){
			ListSizeX = LX * kSortWX
			ListSizeY = LY * kSortWY
			buffer kTempBufferID, ListSizeX, ListSizeY
			//どんどん書き込んでいく
			for k, 0, sort_list_size(sort_kind)
				x = k / LY
				y = k \ LY
				pos x * kSortWX, y * kSortWY
				gcopy kSortListBufferID, k * kSortWX, 0, kSortWX, kSortWY
			next
		}else{
			ListSizeX = LX * kSort2WX
			ListSizeY = LY * kSort2WY
			buffer kTempBufferID, ListSizeX, ListSizeY
			//どんどん書き込んでいく
			for k, 0, sort_list_size(sort_kind)
				x = k / LY
				y = k \ LY
				pos x * kSort2WX, y * kSort2WY
				gcopy kSort2ListBufferID, k * kSort2WX, 0, kSort2WX, kSort2WY
			next
		}
	}else{
		// 特殊バージョン
		if(sort_kind == 0){
			// 艦娘→艦種別・練度順で並べていく
			//リストを一通り読み込む
			dim list_type, kSortListHeight * sort_list_size(sort_kind)
			dim list_level, kSortListHeight * sort_list_size(sort_kind)
			sdim list_pos, 64, kSortListHeight * sort_list_size(sort_kind)
			kammusues = 0
			sdim temp, kSortStrLength
			for i, 0, sort_list_size
				for j, 0, kSortListHeight
					gsel kSortListBufferID
					// 画像からデータを読み込む
					temp = ""
					for k, 0, kSortStrLength
						pget i * kSortWX + k + 2, kSortWY2 * j + 12
						if(ginfo_r < 128){
							temp += "1"
						}else{
							temp += "0"
						}
					next
					// 艦種を判別する(一番近い艦種を求める)
					min_diff = kSortStrLength + 1
					best_type = -1
					for k, 0, kSortType
						diff = 0
						for m, 0, kSortStrLength
							if(strmid(temp, m, 1) != strmid(sort_type_str(k), m, 1)) :diff++
						next
						if(diff < min_diff){
							min_diff = diff
							best_type = k
						}
					next
					if(sort_type_name(best_type) == "なし") :_continue
					list_pos(kammusues) = "" + i + "," + j
					list_type(kammusues) = best_type
					// レベルを読み取る
					//ケッコンしているかを判定(指輪ではなく純粋に100の位を見ている)
					pget i * kSortWX + 166, kSortWY2 * j + 12
					if(ginfo_r < 230){
						list_level(kammusues) = 100
					}else{
						list_level(kammusues) = 0
					}

					//数字部分は文字認識で判定
					sort_pos_x_.0 = i * kSortWX + sort_pos_x(0), i * kSortWX + sort_pos_x(1)
					//まず、しきい値190で読み取る
					dim number, 2
					ReadNumber number, 2, sort_pos_x_, kSortWY2 * j + 8, 8, 12, 190, FALSE
					NormalizeLevel number
					level_a = number(0) * 10 + number(1)
					//次に、しきい値220で読み取る
					gsel kSortListBufferID
					ReadNumber number, 2, sort_pos_x_, kSortWY2 * j + 8, 8, 12, 220, FALSE
					NormalizeLevel number
					level_b = number(0) * 10 + number(1)
					//レベル50〜79まではlevel_b、それ以外はlevel_aを信用したい
					if(limit(level_b, 50, 79) == level_b){
						list_level(kammusues) += level_b
					}else{
						list_level(kammusues) += level_a
					}
					kammusues++
				next
			next
			// 読み込んだ結果を艦種・レベル毎にソートする
			for i, 0, kammusues - 1
				for j, i + 1, kammusues
					flg = FALSE
					if(list_type(i) > list_type(j)){
						flg = TRUE
					}else{
						if(list_type(i) == list_type(j)){
							if(list_level(i) < list_level(j)){
								flg == TRUE
							}
						}
					}
					if(flg){
						temp = list_type(i)  :list_type(i)  = list_type(j)  :list_type(j)  = temp
						temp = list_level(i) :list_level(i) = list_level(j) :list_level(j) = temp
						temp = list_pos(i)   :list_pos(i)   = list_pos(j)   :list_pos(j)   = temp
					}
				next
			next
			//ソート結果から、出力ファイルを生成する
			LX = (sort_width_index + 1)
			LY = kammusues / LX
			if(kammusues \ LX != 0) :LY++
			ListSizeX = LX * kSortWX
			ListSizeY = LY * kSortWY3
			buffer kTempBufferID, ListSizeX, ListSizeY
			// どんどん書き込んでいく
			for k, 0, kammusues
				x = k / LY
				y = k \ LY
				pos x * kSortWX, y * kSortWY3
				split list_pos(k), ",", temp
				px = int(temp(0))
				py = int(temp(1))
				gcopy kSortListBufferID, px * kSortWX, sort_pos_y(py), kSortWX, kSortWY3
			next
		}else{
			// 装備→☆付きor熟練度MAXのを抽出する
			//リストを一通り読み込む
			sdim list_pos, 64, kSort2ListHeight * sort_list_size(sort_kind)
			weapons = 0
			for i, 0, sort_list_size(sort_kind)
				for j, 0, kSort2ListHeight
					gsel kSort2ListBufferID
					if(NearColor(i * kSort2WX + 173, j * kSort2WY2 + 14, 68, 168, 164)){
						// ☆付き装備
						list_pos(weapons) = "" + i + "," + j
						weapons++
						_continue
					}
					if(NearColor(i * kSort2WX + 159, j * kSort2WY2 + 14, 208, 148, 3)){
						if(NearColor(i * kSort2WX + 166, j * kSort2WY2 + 14, 208, 148, 3)){
							// 熟練度MAX
							list_pos(weapons) = "" + i + "," + j
							weapons++
							_continue
						}
					}
				next
			next
			//ソート結果から、出力ファイルを生成する
			LX = (sort_width_index + 1)
			LY = weapons / LX
			if(weapons \ LX != 0) :LY++
			ListSizeX = LX * kSort2WX
			ListSizeY = LY * kSort2WY3
			buffer kTempBufferID, ListSizeX, ListSizeY
			// どんどん書き込んでいく
			for k, 0, weapons
				x = k / LY
				y = k \ LY
				pos x * kSort2WX, y * kSort2WY3
				split list_pos(k), ",", temp
				px = int(temp(0))
				py = int(temp(1))
				gcopy kSort2ListBufferID, px * kSort2WX, py * kSort2WY3, kSort2WX, kSort2WY3
			next
		}
	}
	file_name = NowTime() + ".png"
	PicSave file_name
	PutLog "ファイル名：" + file_name
return

//*ソート一覧で選択項目を上げる
*upper_sort_list
	if(sort_index == limit(sort_index, 1, sort_list_size(sort_kind) - 1)){
		;バッファの入れ替え
		if(sort_kind == 0){
			// 艦娘一覧
			buffer kTempBufferID, kSortWX, kSortWY
				gcopy kSortListBufferID, sort_index * kSortWX, 0, kSortWX, kSortWY
			gsel kSortListBufferID
				pos sort_index * kSortWX, 0
					gcopy kSortListBufferID, (sort_index - 1) * kSortWX, 0, kSortWX, kSortWY
				pos (sort_index - 1) * kSortWX, 0
					gcopy kTempBufferID, 0, 0, kSortWX, kSortWY
		}else{
			if(sort_kind == 1){
				// 装備一覧
				buffer kTempBufferID, kSort2WX, kSort2WY
					gcopy kSort2ListBufferID, sort_index * kSort2WX, 0, kSort2WX, kSort2WY
				gsel kSort2ListBufferID
					pos sort_index * kSort2WX, 0
						gcopy kSort2ListBufferID, (sort_index - 1) * kSort2WX, 0, kSort2WX, kSort2WY
					pos (sort_index - 1) * kSort2WX, 0
						gcopy kTempBufferID, 0, 0, kSort2WX, kSort2WY
			}else{
				// 基地一覧
				buffer kTempBufferID, kBaseAirWX, kBaseAirWY
					gcopy kSort3ListBufferID, sort_index * kBaseAirWX, 0, kBaseAirWX, kBaseAirWY
				gsel kSort3ListBufferID
					pos sort_index * kBaseAirWX, 0
						gcopy kSort3ListBufferID, (sort_index - 1) * kBaseAirWX, 0, kBaseAirWX, kBaseAirWY
					pos (sort_index - 1) * kBaseAirWX, 0
						gcopy kTempBufferID, 0, 0, kBaseAirWX, kBaseAirWY
			}
		}
		;リストの入れ替え
		notesel sort_list(sort_kind)
		noteget text_buffer,  sort_index - 1
		noteget text_buffer2, sort_index
		noteadd text_buffer2, sort_index - 1, 1
		noteadd text_buffer,  sort_index,     1
		gsel kSortListWindowID
		objprm sort_index_id, sort_list(sort_kind)
		sort_index--
		objprm sort_index_id, sort_index
	}
return

*upper_sort_list2
	loops = sort_index
	for k, 0, loops
		gosub *upper_sort_list
	next
return

//*ソート一覧で選択項目を下げる
*lower_sort_list
	if(sort_index == limit(sort_index, 0, sort_list_size(sort_kind) - 2)){
		;バッファの入れ替え
		if(sort_kind == 0){
			// 艦娘一覧
			buffer kTempBufferID, kSortWX, kSortWY
				gcopy kSortListBufferID, sort_index * kSortWX, 0, kSortWX, kSortWY
			gsel kSortListBufferID
				pos sort_index * kSortWX, 0
					gcopy kSortListBufferID, (sort_index + 1) * kSortWX, 0, kSortWX, kSortWY
				pos (sort_index + 1) * kSortWX, 0
					gcopy kTempBufferID, 0, 0, kSortWX, kSortWY
		}else{
			if(sort_kind == 1){
				// 装備一覧
				buffer kTempBufferID, kSort2WX, kSort2WY
					gcopy kSort2ListBufferID, sort_index * kSort2WX, 0, kSort2WX, kSort2WY
				gsel kSort2ListBufferID
					pos sort_index * kSort2WX, 0
						gcopy kSort2ListBufferID, (sort_index + 1) * kSort2WX, 0, kSort2WX, kSort2WY
					pos (sort_index + 1) * kSort2WX, 0
						gcopy kTempBufferID, 0, 0, kSort2WX, kSort2WY
			}else{
				// 基地一覧
				buffer kTempBufferID, kBaseAirWX, kBaseAirWY
					gcopy kSort3ListBufferID, sort_index * kBaseAirWX, 0, kBaseAirWX, kBaseAirWY
				gsel kSort3ListBufferID
					pos sort_index * kBaseAirWX, 0
						gcopy kSort3ListBufferID, (sort_index + 1) * kBaseAirWX, 0, kBaseAirWX, kBaseAirWY
					pos (sort_index + 1) * kBaseAirWX, 0
						gcopy kTempBufferID, 0, 0, kBaseAirWX, kBaseAirWY
			}
		}
		;リストの入れ替え
		notesel sort_list(sort_kind)
		noteget text_buffer,  sort_index + 1
		noteget text_buffer2, sort_index
		noteadd text_buffer2, sort_index + 1, 1
		noteadd text_buffer,  sort_index,     1
		gsel kSortListWindowID
		objprm sort_index_id, sort_list(sort_kind)
		sort_index++
		objprm sort_index_id, sort_index
	}
return

*lower_sort_list2
	loops = sort_list_size(sort_kind) - sort_index - 1
	for k, 0, loops
		gosub *lower_sort_list
	next
return

//*ソート一覧で選択項目を削除する
*del_sort_list
	if((sort_index >= 0) && (sort_index < sort_list_size(sort_kind))){
		;バッファの削除
		if(sort_kind == 0){
			// 艦娘一覧
			gsel kSortListBufferID
			for k, sort_index, sort_list_size(sort_kind) - 1
				pos k * kSortWX
				gcopy kSortListBufferID, (k + 1) * kSortWX, 0, kSortWX, kSortWY
			next
		}else{
			if(sort_kind == 0){
				// 装備一覧
				gsel kSort2ListBufferID
				for k, sort_index, sort_list_size(sort_kind) - 1
					pos k * kSort2WX
					gcopy kSort2ListBufferID, (k + 1) * kSort2WX, 0, kSort2WX, kSort2WY
				next
			}else{
				// 基地一覧
				gsel kSort3ListBufferID
				for k, sort_index, sort_list_size(sort_kind) - 1
					pos k * kBaseAirWX
					gcopy kSort3ListBufferID, (k + 1) * kBaseAirWX, 0, kBaseAirWX, kBaseAirWY
				next
			}
		}
		;リストの削除
		notesel sort_list(sort_kind)
		notedel sort_index
		gsel kSortListWindowID
		objprm sort_index_id, sort_list(sort_kind)
		sort_list_size(sort_kind)--
		if(sort_list_size(sort_kind) == 0){
			title "ソート一覧(" + sort_kind_name(sort_kind) + ")"
		}else{
			title "ソート一覧(" + sort_kind_name(sort_kind) + "," + sort_list_size(sort_kind) + "枚)"
		}
	}
return

//*ソート一覧で項目を全削除する
*alldel_sort_list
	dialog "項目を全削除しますか？", 2, kSoftName
	if(stat == 6){
		if(sort_kind == 0){
			gsel kSortListBufferID
		}else{
			if(sort_kind == 1){
				gsel kSort2ListBufferID
			}else{
				gsel kSort3ListBufferID
			}
		}
		color 255, 255, 255 :boxf
		gsel kSortListWindowID
		sort_list(sort_kind) = ""
		objprm sort_index_id, sort_list(sort_kind)
		sort_list_size(sort_kind) = 0
		title "ソート一覧(" + sort_kind_name(sort_kind) + ")"
	}
return

//*選択位置が変わった際に表示する画像を変更する
*redraw_sort_preview
	if((sort_index_ != sort_index) && (sort_index >= 0)){
		if(sort_kind == 0){
			gsel kSortListWindowID
			POS_XY 2, 0
			gzoom2 SIZE_X(2), SIZE_Y(8), kSortListBufferID, sort_index * kSortWX, 0, kSortWX, kSortWY
			sort_index_ = sort_index
		}else{
			if(sort_kind == 1){
				gsel kSortListWindowID
				POS_XY 2, 0
				gzoom2 SIZE_X(2), SIZE_Y(8), kSort2ListBufferID, sort_index * kSort2WX, 0, kSort2WX, kSort2WY
				sort_index_ = sort_index
			}else{
				gsel kSortListWindowID
				POS_XY 2, 0
				gzoom2 SIZE_X(2), SIZE_Y(8), kSort3ListBufferID, sort_index * kBaseAirWX, 0, kBaseAirWX, kBaseAirWY
				sort_index_ = sort_index
			}
		}
	}
return
