/* 各種タイマーに関するイベント処理 */

//*各種タイマーの値を更新する
*check_timer
	// 入渠画面
	if((scene_result(0) == "入渠画面") && (scene_result(1) == "通常時")){
		for k, 0, kDocks
			gsel kMainBufferID
			// クレーンの位置を検出して、レベルや時間に掛かっていそうな場合に無視する
			crane_pos = GetCranePos(k)
			if(crane_pos != -1){
				if(crane_pos == limit(crane_pos, 450, 760)) :_continue
			}
			// ドックに誰もいなければ無視する
			if(NearColor(480, dck_pos_y(k), 33, 174, 178) == FALSE){
				dock_finish_time(k) = 0.0
				dock_finish_flg(k) = FALSE
				_continue
			}
			// 各桁の数字を読み取って、配列に代入する
			dock_finish_time(k) = 0.0
			dock_finish_flg(k) = FALSE
			dim number, 6
			ReadNumber number, 6, dck_pos_x, dck_pos_y(k) + 25, 11, 16, 170, FALSE
			// 正規化して、終了時刻を代入する
			NormalizeTime number
			d_time = CnvFloatSec(number(0) * 10 + number(1), number(2) * 10 + number(3), number(4) * 10 + number(5), 0)
			dock_finish_time(k) = GetFloatTime() + d_time
			// 入渠艦のレベルを更新する
			dim number2, 3
			gsel kMainBufferID
			ReadNumber number2, 3, dck_level_pos_x, dck_pos_y(k) - 1, 9, 13, 128, TRUE
			NormalizeLevel2 number2
			dock_level(k) = number2(0)
			if(number2(2) >= 0){
				dock_level(k) = number2(0) * 100 + number2(1) * 10 + number2(2)
			}else :if(number2(1) >= 0){
				dock_level(k) = number2(0) * 10 + number2(1)
			}else{
				//dock_level(k) = number2(0)
			}
		next
	}
	// 工廠画面
	if((scene_result(0) == "工廠画面") && (scene_result(1) == "通常時")){
		for k, 0, kDocks
			dock_finish_time(k + kDocks) = 0.0
			dock_finish_flg(k + Docks) = FALSE
			// ドックに誰もいなければ無視する
			gsel kMainBufferID
			if(NearColor(730, bld_pos_y(k), 204, 128, 73) == FALSE){
				dock_finish_time(k + Docks) = 0.0
				dock_finish_flg(k + Docks) = FALSE
				_continue
			}
			// 各桁の数字を読み取って、配列に代入する
			dim number, 6
			ReadNumber number, 6, bld_pos_x, bld_pos_y(k), 11, 16, 170, FALSE
			// 正規化して、終了時刻を代入する
			NormalizeTime number
			d_time = CnvFloatSec(number(0) * 10 + number(1), number(2) * 10 + number(3), number(4) * 10 + number(5), 0)
			dock_finish_time(k + kDocks) = GetFloatTime() + d_time
		next
	}
	// 遠征画面
	if(scene_result(1) == "遠征詳細"){
		for k, 0, kExpPagePer
			gsel kMainBufferID
			if(NearColor(131, 172 + k * 30, 119, 190, 181)){
				exp_select_flg = TRUE
			}else{
				exp_select_flg = FALSE
			}
			// まず旗が立っているかを判別する
			if(exp_select_flg){
				if(NearColor(517,180 + k * 30,47,158,157) == FALSE) :_continue
			}else{
				if(NearColor(517,180 + k * 30,76,168,168) == FALSE) :_continue
			}
			// 次に、右上の遠征名とリストの遠征名が一致しているかを調べる
			// 「名前が一致している」か「全くリスト外の新遠征である」場合のみ認識対象とする
			exp_small_name = GetExpSmallName(k, exp_select_flg)
			exp_large_name = GetExpLargeName()
			if((exp_small_name != exp_large_name) && (exp_small_name != -1) && (exp_large_name != -1)) :_continue
			// そして、旗の番号を判別する
			// 遠征対象が第(unit_number + 1)艦隊となることに注意
			unit_number = 0
			if(exp_select_flg){
				if(NearColor(525,180 + k * 30,224,230,227) && NearColor(523,180 + k * 30, 49,164,163)) :unit_number = 1
				if(NearColor(525,180 + k * 30, 47,164,165) && NearColor(523,180 + k * 30,234,226,213)) :unit_number = 2
				if(NearColor(525,180 + k * 30,117,188,179) && NearColor(523,180 + k * 30,117,188,178)) :unit_number = 3
			}else{
				if(NearColor(525,180 + k * 30,224,230,227) && NearColor(523,180 + k * 30, 84,176,174)) :unit_number = 1
				if(NearColor(525,180 + k * 30, 47,164,165) && NearColor(523,180 + k * 30,236,228,215)) :unit_number = 2
				if(NearColor(525,180 + k * 30,237,229,217) && NearColor(523,180 + k * 30,239,231,219)) :unit_number = 3
			}
			if(unit_number == 0) :_continue
			// 各桁の数字を読み取って、配列に代入する
			dock_finish_time(unit_number - 1 + kDocks * 2) = 0.0
			dock_finish_flg(unit_number - 1 + kDocks * 2) = FALSE
			expedition_kind(unit_number - 1) = -1
			dim number, 6
			ReadNumber number, 6, exp_pos_x, exp_pos_y, 9, 13, 190, FALSE
			// 正規化して、終了時刻を代入する
			NormalizeTime number
			d_time = CnvFloatSec(number(0) * 10 + number(1), number(2) * 10 + number(3), number(4) * 10 + number(5), 0)
			dock_finish_time(unit_number - 1 + kDocks * 2) = GetFloatTime() + d_time
			if(exp_small_name == exp_large_name){
				expedition_kind(unit_number - 1) = exp_small_name
			}
		next
	}
	// 明石タイマー
	if((scene_result(0) == "編成画面") && (instr(scene_result(1),,"艦隊") != -1)){
		// ドラッグして交換しようとしていないかを調べる
		gsel kMainBufferID
		drag_flg = FALSE
		for k, 0, kUnitNum
			x = k \ 2 :y = k / 2
			if(NearColor(342 * x + 142, 113 * y + 138, 180, 222, 219)) :drag_flg = TRUE :_break
			if(NearColor(342 * x + 142, 113 * y + 138, 158, 158, 157)) :drag_flg = TRUE :_break
		next
		if(drag_flg) :return
		// 各艦の「マーク」を読み取る
		sdim fleet_name, kUnitMarkLength2, kUnitNum
		for n, 0, kUnitNum
			x = n \ 2 :y = n / 2
			for i, 0, 5
				tmp = 0
				for j, 0, 8
					p = i * 8 + j
					pget 342 * x + 284 + 97, 113 * y + 145 + p
					yy = 0.299 * ginfo_r + 0.587 * ginfo_g + 0.114 * ginfo_b
					tmp = tmp << 1
					if(yy >= 127.5) :tmp += 1
				next
				fleet_name(n) += strf("%x", tmp)
			next
		next
		// 明石が旗艦に居るかを判定する
		// 明石　：0x「7f7fff7ff8」
		// 明石改：0x「7dffffffc8」
		if((fleet_name(0) == "7f7fff7ff8") || (fleet_name(0) == "7dffffffc8")){
			akashi_1st_flg = TRUE
		}else{
			akashi_1st_flg = FALSE
		}
		// 現在開いている艦隊番号を取得する
		fleet_num_ = instr(fleet_2byte_num,,strmid(scene_result(1), 2, 2)) / 3 + 1
		// リセット処理
		if(akashi_1st_flg == FALSE) :return
		change_mark_flg = FALSE
		for n, 1, kUnitNum
			if(akashi_fleet_name(n) != fleet_name(n)) :change_mark_flg = TRUE :_break
		next
		if((change_mark_flg) && (flash_time - last_preset_time > 5.0 / 60 /60 / 24)){
			akashi_start_time = GetFloatTime()
			akashi_fleet_num = fleet_num_
			PutLog "【明石タイマー】"
			PutLog "タイマーをセットしました。"
			for n, 0, kUnitNum
				akashi_fleet_name(n) = fleet_name(n)
			next
		}
	}
return

//*各種タイマーの表示を更新する
*redraw_timer
	timer_output = "【入渠ドック】\n"
	now_time = GetFloatTime()
	for k, 0, kDocks
		time_diff = dock_finish_time(k) - now_time
		if((dock_finish_time(k) != 0.0) && (time_diff > 0.0)){
			timer_output += "" + (k + 1) + "→" + CnvStrSec2(time_diff) + " Lv" + dock_level(k)
			if(time_diff < 1.0 / 24 / 60){
				if(dock_finish_flg(k) == FALSE){
					dock_finish_flg(k) = TRUE
					PutLog "【終了通知】"
					PutLog "入渠―第" + (k + 1) + "ドック"
					gsel kMainWindowID
					TasktrayPopup2 "第" + (k + 1) + "ドックの\n入渠がまもなく完了します。", kSoftName, 1, 1000
					if(sound_alert_flg) :PlayAlert kAlertDck
				}
				timer_output += "☆"
			}
			timer_output += "\n"
		}else{
			timer_output += "" + (k + 1) + "→00:00:00　空\n"
			dock_finish_flg(k) = FALSE
		}
	next
	timer_output += "【建造ドック】\n"
	for k, 0, kDocks
		time_diff = dock_finish_time(k + kDocks) - now_time
		if((dock_finish_time(k + kDocks) != 0.0) && (time_diff > 0.0)){
			timer_output += "" + (k + 1) + "→" + CnvStrSec2(time_diff)
			if(time_diff < 1.0 / 24 / 60){
				if(dock_finish_flg(k + kDocks) == FALSE){
					dock_finish_flg(k + kDocks) = TRUE
					PutLog "【終了通知】"
					PutLog "建造―第" + (k + 1) + "ドック"
					gsel kMainWindowID
					TasktrayPopup2 "第" + (k + 1) + "ドックの\n建造がまもなく完了します。", kSoftName, 1, 1000
					if(sound_alert_flg) :PlayAlert kAlertBld
				}
				timer_output += "☆"
			}
			timer_output += "\n"
		}else{
			timer_output += "" + (k + 1) + "→00:00:00　空\n"
			dock_finish_flg(k + kDocks) = FALSE
		}
	next
	timer_output += "【遠征艦隊】\n"
	for k, 0, kFleetNum - 1
		time_diff = dock_finish_time(k + kDocks * 2) - now_time
		if((dock_finish_time(k + kDocks * 2) != 0.0) && (time_diff > 0.0)){
			timer_output += "" + (k + 2) + "→" + CnvStrSec2(time_diff)
			if(time_diff < 1.0 / 24 / 60){
				if(dock_finish_flg(k + kDocks * 2) == FALSE){
					dock_finish_flg(k + kDocks * 2) = TRUE
					PutLog "【終了通知】"
					if(expedition_kind(k) != -1){
						PutLog "遠征―第" + (k + 2) + "艦隊" + "(" + exped_name(expedition_kind(k)) + ")"
					}else{
						PutLog "遠征―第" + (k + 2) + "艦隊"
					}
					gsel kMainWindowID
					TasktrayPopup2 "第" + (k + 2) + "艦隊の\n遠征がまもなく完了します。", kSoftName, 1, 1000
					if(sound_alert_flg) :PlayAlert kAlertExp
				}
				timer_output += "☆"
			}else{
				timer_output += "　"
			}
			if(expedition_kind(k) != -1){
				timer_output += exped_name(expedition_kind(k)) + "\n"
			}else{
				timer_output += "？\n"
			}
		}else{
			timer_output += "" + (k + 2) + "→00:00:00\n"
			dock_finish_flg(k + kDocks * 2) = FALSE
		}
	next
	timer_output += "【明石タイマー】\n"
	time_diff = now_time - akashi_start_time
	if(time_diff > 0.0) :timer_output += CnvStrSec2(time_diff) :else :timer_output += "00:00:00"
	if(time_diff >= kAkashiInterval) :timer_output += "☆" :else :timer_output += "　"
	timer_output += "第" + strmid(fleet_2byte_num, (akashi_fleet_num - 1) * 3, 2) + "艦隊\n"
	gsel kTimerWindowID
	objprm 0, timer_output
return

//*各種タイマーを表示する
*show_timer
	gsel kTimerWindowID, 2
	show_window(kTimerWindowID) = TRUE
return
