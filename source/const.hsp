/* 定数宣言 */

	#pack "scene_list.txt"
	#pack "area_exp.txt"
	#pack "exp_table.txt"

// 通常の定数
	// 真偽
	#const global TRUE  1
	#const global FALSE 0
	#const global NULL  0
	// 画面ID
	#enum kMainWindowID = 0	;メイン画面
	#enum kPutWindowID		;サブ画面
	#enum kPutTempWindowID	;サブ画面用バッファ
	#enum kTempBufferID		;テンポラリ画面
	;座標取得用
	#enum kSelectWindowID	;手動指定用画面
	#enum kDeskBufferID		;スクショ用
	#enum kFlashBufferID	;検索用
	;ツール用
	#enum kOptionWindowID	;オプション画面
	#enum kExpCalcWindowID	;経験値計算機
	#enum kDockWindowID		;各種タイマー
	#enum kCountWindowID	;○号カウンター
	#enum kSortListWindowID	;ソート一覧
	#enum kSupplyGraphID	;資源グラフ
	#enum kGraphBufferID
	#enum kMatchBufferID	;マッチング用の捨てID
	#enum kDeadZoneWindowID	;大破進撃を阻止するための画面
	;バッファ用
	#enum global kNumGetBufferID	;数字認識用
	#enum kCursorBufferID	;カーソル用
	#enum kBattleBufferID	;戦闘画面(特殊)
	#enum kDropBufferID		;ドロップ画面
	#enum kCaptureBufferID	;各保存画面
	// OpenCV用ID
	#enum global kCVTempBufferID = 0
	#enum global kCVNumBufferID
	#enum global kCVMatchBufferID
	#enum global kCVDenoiseBufferID
	// パラメータ
	#const global kFleetNum    4	;艦隊数
	#const global kUnitNum     6	;艦隊毎の艦娘数
	#const global kDocks       4	;ドック数
	#const global kBgmListSize 3	;BGMの種類数
	#const global kTypeUnknown 0	;デフォルトの判定結果
	#const global kTypeNow     0	;現在画面
	// オブジェクトのサイズ
	;Flash画面のサイズ
	#const  global kFlashWX 800
	#const  global kFlashWY 480
	;オブジェクト関係
	#const kObjX 80
	#const kObjY 20
	#const kObjSpace 8
	#const kObjSpaceX kObjSpace + kObjX
	#const kObjSpaceY kObjSpace + kObjY
	#const kStatusBarY 24
	;編成画面のサイズ
	#const kFleetWX 684
	#const kFleetWY 368
	;編成画面のオフセット座標
	#const kFleetPX 110
	#const kFleetPY 96
	;改装画面のサイズ
	#const kUnitWX 455
	#const kUnitWY 365
	;改装画面のオフセット座標
	#const kUnitPX 330
	#const kUnitPY 100
	;ソート画面のサイズ
	#const kSortWX 194
	#const kSortWY 279
	;ソートのオフセット座標
	#const kSortPX 398
	#const kSortPY 154
	;資源画像用のパラメータ
	#const kStockAllWX 229	;全体のサイズ
	#const kStockAllWY 60
	#const kStockTimePX 9	;時刻部分の左上座標
	#const kStockTimePY 407
	#const kStockTimeWX 86	;時刻部分のサイズ
	#const kStockTimeWY kStockAllWY	
	#const kStockOtherPX 657	;資源部分の左上座標
	#const kStockOtherPY 9
	#const kStockOtherWX kStockAllWX - kStockTimeWX	;資源部分のサイズ
	#const kStockOtherWY kStockAllWY
	;フォントサイズ
	#const kSmallFontSize 12
	#const kLargeFontSize 30
	#const kStatusBarFontSize kStatusBarY - 4
	#const kStatusBarOffset (kStatusBarY - kStatusBarFontSize) / 2
	#const kGraphFontSize 12
	;メイン画面のサイズ
	#const kMainWX kObjSpace + kObjSpaceX * 2
	#const kMainWY kObjSpace * 4 + kObjSpaceY * 12
;	#const kMainWY kObjSpace * 4 + kObjSpaceY * 11
	;カウンター画面
	#const kObjOffset kObjY / 2 - kSmallFontSize / 2
	#const kCounterY 60
	;資源グラフのサイズ
	#const kGraphWX 600
	#const kGraphWY 300
	// キーボード・マウス操作
	#const kStickEscKey 128
	#const kStickMouse  256
	// 認識用
	#const global kPoints 3	;3点に対して、
	#const global kParams 5	;xy座標+RGBの5つの数字でチェックする
	#const global kMatchSize 64	;認識時のブロックサイズ

	dim yearplus,13,2
	yearplus(0,0)=0		:yearplus(0,1)=0
	yearplus(1,0)=31	:yearplus(1,1)=31
	yearplus(2,0)=59	:yearplus(2,1)=60
	yearplus(3,0)=90	:yearplus(3,1)=91
	yearplus(4,0)=120	:yearplus(4,1)=121
	yearplus(5,0)=151	:yearplus(5,1)=152
	yearplus(6,0)=181	:yearplus(6,1)=182
	yearplus(7,0)=212	:yearplus(7,1)=213
	yearplus(8,0)=243	:yearplus(8,1)=244
	yearplus(9,0)=273	:yearplus(9,1)=274
	yearplus(10,0)=304	:yearplus(10,1)=305
	yearplus(11,0)=334	:yearplus(11,1)=335
	yearplus(12,0)=365	:yearplus(12,1)=366

// 変数初期化
	// コンボボックスの内容
	sdim mode_list, 1024	//実行モード
		gosub *init_mode_list
	sdim fleets_list, 1024	//第○艦隊
		for k, 1, kFleetNum + 1
			fleets_list += "第" + k + "艦隊\n"
		next
	sdim units_list, 10240	//第○艦隊○番艦
		for i, 1, kFleetNum + 1
			for j, 1, kUnitNum + 1
				units_list += "第" + i + "-" + j + "番艦\n"
			next
		next
	sdim commands_list, 1024	//艦隊保存用コマンド
		for k, 1, kFleetNum + 1
			commands_list += "第" + k + "艦隊\n"
		next
		commands_list += "連合艦隊\n"
		commands_list += "支援艦隊\n"
	sdim bgm_list, 1024	//BGM一覧
		bgm_list_name.0 = "母港", "マップ", "戦闘"
		bgm_list_flg.0 = FALSE, FALSE, FALSE
		sdim bgm_list_filename, 260, kBgmListSize
		bgm_list_filename.0 = "<NONE>", "<NONE>", "<NONE>"
		gosub *init_bgm_list
	sdim fps_list, 1024	//fps一覧
		fps_num.0 = 30, 20, 15, 10, 5, 3, 2, 1
		for k, 0, length(fps_num)
			fps_list += "" + fps_num(k) + "fps\n"
		next
	sdim zooming_list, 1024	//倍率一覧
		zooming_num.0 = 50, 75, 100, 150, 200
		for k, 0, length(zooming_num)
			zooming_list += "倍率" + zooming_num(k) + "％\n"
		next
	sdim level_list, 1024
		for k, 1, 150 + 1
			level_list += "" + k + "\n"
		next
	sdim area_list, 1024
		gosub *area_init
	// その他設定
	;カレントディレクトリを記憶
	sdim pic_save_path, 260, 2
		pic_save_path(0) = dir_cur
		pic_save_path(1) = pic_save_path(0)
	;経験値計算機
	now_level = 0
	goal_level = 24
	area_index = 11
	reader_ship_flg = TRUE
	mvp_flg = TRUE
	result_index = 1
	;○号カウンター
	sdim count_result, 1024		;○号カウンター
	a_sortie_count = 0			;あ号出撃
	a_to_boss_count = 0			;あ号ボス到達
	a_win_boss_count = 0		;あ号ボス勝利
	a_s_win_count = 0			;あ号S勝利
	r_count = 0					;ろ号
	i_count = 0					;い号
	;各種タイマー
	;入渠
	dock1_time1 = "00:00:00" :dock1_time2 = ""
	dock2_time1 = "00:00:00" :dock2_time2 = ""
	dock3_time1 = "00:00:00" :dock3_time2 = ""
	dock4_time1 = "00:00:00" :dock4_time2 = ""
	dim dock_hour,   kDocks
	dim dock_minute, kDocks
	dim dock_second, kDocks
	xpos.0 = 623, 634, 652, 663, 680, 691
	ypos.0 = 136, 216, 298, 380
	;建造
	bdock1_time1 = "00:00:00" :bdock1_time2 = ""
	bdock2_time1 = "00:00:00" :bdock2_time2 = ""
	bdock3_time1 = "00:00:00" :bdock3_time2 = ""
	bdock4_time1 = "00:00:00" :bdock4_time2 = ""
	dim bdock_hour,   kDocks
	dim bdock_minute, kDocks
	dim bdock_second, kDocks
	bxpos.0 = 402, 414, 433, 445, 464, 476
	bypos.0 = 185, 263, 341, 419
	;遠征
	edock2_time1 = "00:00:00" :edock2_time2 = ""
	edock3_time1 = "00:00:00" :edock3_time2 = ""
	edock4_time1 = "00:00:00" :edock4_time2 = ""
	dim edock_hour,   kDocks - 1
	dim edock_minute, kDocks - 1
	dim edock_second, kDocks - 1
	expos.0 = 722, 731, 745, 754, 768, 777
	gosub *match_init
	;ソート一覧
	sdim sort_list, 1024
	sort_list_size = 0
	;資源ログ
	exist "supply.csv"
	if(strsize != -1){
		notesel supply_log
		noteload "supply.csv"
		dim supply_log_int, 100, 2 + 5	;2は日時の部分
		supply_log_size = LoadLog(supply_log, supply_log_int)
	}else{
		sdim supply_log, 32000
		supply_log = "時間,燃料,弾薬,鋼材,ボーキ,バケツ\n"
		supply_log_size = 0
	}
	supply_last_time = -1
	logging_index = 9
	;資源グラフ
	scale_mode = 0	;モード(1日・1週間・2週間・1ヶ月・2ヶ月・3ヶ月・半年・1年)
	scale_zooming.0  = 12, 7,  7, 10, 10, 12,   6,  12	;縦線の数
	scale_blocking.0 =  1, 7, 14, 30, 60, 90, 180, 365	;1画面毎の日数
	;各種フラグ
	name_disable_flg  = TRUE
	cursor_flg        = TRUE
	dead_zone_flg     = FALSE
	cap_crop_flg      = FALSE
	auto_set_flg      = TRUE
	auto_save_flg     = TRUE
	my_folder_flg     = FALSE
	auto_supply_flg   = TRUE
	denoise_flg       = FALSE
	get_pos_flg       = FALSE	;座標取得するとTRUEになる
	other_get_pos_flg = FALSE	;自動設定IIを利用するとTRUEになる
	get_handle_flg    = TRUE	;ズレ補正時だけOFFになる
	show_date_flg     = TRUE	;最終更新日時を表示するか否か
	auto_get_pos_flg  = FALSE	;座標取得を利用した時のみTRUEになる
	exit_flg = FALSE			;終了時にONになる(Win8対策)
	;その他
	dim unit_count, kFleetNum
	dim unit_count_, kFleetNum
	dim last_up_date, kSceneListSize + kFleetNum + kFleetNum * kUnitNum + 2, 7
	dim supply_list, 5
	GetMonitorParam kDispX ,kDispY ,kOffsetX, kOffsetY
	kFleetIdOffset = kCaptureBufferID + kSceneListSize
	kUnitIdOffset = kFleetIdOffset + kFleetNum
	kSortIdOffset = kUnitIdOffset + kFleetNum * kUnitNum
	flash_px = -1
	flash_py = -1
	fps_index = 2
	zooming_index_ = -1
	dead_zone_flg_ = FALSE
	dead_zone_flg__ = FALSE

// バッファ初期化
	//マウスカーソル
	buffer kCursorBufferID
	exist pic_save_path(0) + "\\cursor.png"
	if(strsize == -1) :end
	picload pic_save_path(0) + "\\cursor.png", 0
	cursor_x = ginfo_sx :cursor_y = ginfo_sy

	//保存用バッファ
	;サブ画面用バッファ
	buffer kPutTempWindowID, kFlashWX, kFlashWY
	;各保存画面
	buffer kBattleBufferID, kFlashWX, kFlashWY
	buffer kDropBufferID, kFlashWX, kFlashWY
	repeat kSceneListSize
		buffer kCaptureBufferID + cnt, kFlashWX, kFlashWY
	loop
	;編成画面
	repeat kFleetNum
		buffer kCaptureBufferID + kSceneListSize + cnt, kFlashWX, kFlashWY
	loop
	;改装画面
	repeat kFleetNum * kUnitNum
		buffer kCaptureBufferID + kSceneListSize + kFleetNum + cnt, kFlashWX, kFlashWY
	loop
	;認識用
	buffer kNumGetBufferID, kMatchSize, kMatchSize
	;デノイズ用
	cvbuffer kCVDenoiseBufferID, kFlashWX, kFlashWY

	ReadSaveData
	gosub *init_bgm_list
	goto *main1

*init_bgm_list
	bgm_list = ""
	for k, 0, kBgmListSize
		bgm_list += bgm_list_name(k)
		if(bgm_list_flg(k)){
			bgm_list += "(ON ,"
		}else{
			bgm_list += "(OFF,"
		}
		exist bgm_list_filename(k)
		if(strsize != -1){
			mmload bgm_list_filename(k), k, 1
			bgm_list += getpath(bgm_list_filename(k), 1 + 8) + ")\n"
		}else{
			bgm_list += "<NONE>)\n"
		}
	next
return

*init_mode_list
	notesel text_buffer
	noteload "scene_list.txt"
	kSceneListSize = notemax - 1
	dim mode_filter, kSceneListSize, kPoints, kParams	;判定用パラメータ
	sdim mode_list2, 64, kSceneListSize + 5	;実行モード一覧
		mode_list += "現在画面\n"
		mode_list2(0) = "現在画面"
	//1行づつ読み込む
	repeat kSceneListSize
		noteget get, cnt + 1
		split get, "\t", temp
		mode_list += temp(0) + "\n"
		mode_list2(cnt + 1) = temp(0)
		for i, 0, kPoints
			for j, 0, kParams
				mode_filter(cnt, i, j) = int(temp(i * kParams + j + 1))
			next
		next
	loop
	mode_list += "編成画面\n改装画面\n戦闘画面\nドロップ画面"
	mode_list2(kSceneListSize + 1) = "編成画面"
	mode_list2(kSceneListSize + 2) = "改装画面"
	mode_list2(kSceneListSize + 3) = "戦闘画面"
	mode_list2(kSceneListSize + 4) = "ドロップ画面"
	;判定結果用配列
	sdim mode_list3, 64, kSceneListSize + 5
	mode_list3(0) = "不明"
	repeat kSceneListSize + 4, 1
		mode_list3(cnt) = mode_list2(cnt)
	loop
	;
	kTypeDrop = kSceneListSize + 4
	kTypeDropFlg = FALSE
return

//経験値処理の初期化
*area_init
	notesel text_buffer
	noteload "area_exp.txt"
	dim exp_data, notemax
	repeat notemax
		noteget get, cnt
		split get, " ", temp
		area_list += temp(0) + "\n"
		exp_data(cnt) = int(temp(1)) 
	loop
	noteload "exp_table.txt"
	dim need_exp_table, notemax
	repeat notemax
		noteget get ,cnt
		need_exp_table(cnt) = int(get)
	loop
return

//マッチング処理の初期化
*match_init
	buffer kMatchBufferID, kMatchSize * 23, kMatchSize
	for k, 0, 10
		buffer kNumGetBufferID, kMatchSize, kMatchSize
		color 255, 255, 255 :boxf :color
		font "Symbol", kMatchSize, 1
		mes k
		OtsuThreshold FALSE
		GetSquare px, py, wx, wy
		gsel kMatchBufferID
		pos k * kMatchSize * 2, 0
		gzoom kMatchSize, kMatchSize, kNumGetBufferID, px, py, wx, wy, 1
	next
	OtsuThreshold FALSE
	color :boxf kMatchSize * 22, 0, kMatchSize * 23, kMatchSize
	for k, 0, 12
		DrawSquare k * kMatchSize * 2, 0, kMatchSize, kMatchSize
	next
	cvbuffer kCVMatchBufferID, kMatchSize * 23, kMatchSize
	cvputimg kCVMatchBufferID
return

*main1
