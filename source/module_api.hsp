/* WinAPI絡み */
	#module api
		// APIを呼び出すための宣言
		#uselib "gdi32.dll"
			#func  BitBlt "BitBlt" int,int,int,int,int,int,int,int,int
			#cfunc CreateDC "CreateDCA" sptr,sptr,sptr,int
			#func  DeleteDC "DeleteDC" int
		#uselib "user32.dll"
			#cfunc GetSystemMetrics "GetSystemMetrics" int
			#cfunc GetWindowDC "GetWindowDC" int
			#func  GetWindowRect "GetWindowRect" int, int
			#func  ReleaseDC "ReleaseDC" int, int
			#cfunc WindowFromPoint "WindowFromPoint" int, int
		// APIを呼び出すための定数宣言
		#const NULL 0
		#const SRCCOPY    0x00CC0020
		#const CAPTUREBLT 0x40000000
		#const SM_XVIRTUALSCREEN  0x0000004C
		#const SM_YVIRTUALSCREEN  0x0000004D
		#const SM_CXVIRTUALSCREEN 0x0000004E
		#const SM_CYVIRTUALSCREEN 0x0000004F
		// モニタ全体のオフセットとサイズを取得する
		#deffunc GetDesktopParam array desktop_param
			desktop_param(0) = GetSystemMetrics(SM_XVIRTUALSCREEN)
			desktop_param(1) = GetSystemMetrics(SM_YVIRTUALSCREEN)
			desktop_param(2) = GetSystemMetrics(SM_CXVIRTUALSCREEN)
			desktop_param(3) = GetSystemMetrics(SM_CYVIRTUALSCREEN)
		return
		// デスクトップのスクリーンショットを取得する
		#deffunc DesktopScreenShot int desktop_buffer_id, array desktop_param
			;保存用のバッファを初期化する
			buffer desktop_buffer_id, desktop_param(2), desktop_param(3)
			;デスクトップのデバイスコンテキストを作成する
			hdc_screen = CreateDC ("DISPLAY", NULL, NULL, NULL)
			;デスクトップの画像をコピーする
			BitBlt hdc, 0, 0, desktop_param(2), desktop_param(3), hdc_screen, desktop_param(0), desktop_param(1), SRCCOPY; | CAPTUREBLT
			;デバイスコンテキストを削除する
			DeleteDC hdc_screen
		return
		// 艦これの画面を探索する
		#deffunc FlashPositionSearch int desktop_buffer_id, array flash_position
			// デスクトップのスクショをCVバッファに入れる
			gsel desktop_buffer_id
			if((ginfo_sx < kFlashWX) || (ginfo_sy < kFlashWY)) :return
			cvbuffer kCVDesktopBufferID, ginfo_sx, ginfo_sy
			cvputimg kCVDesktopBufferID
			// 800x480の灰色画面の周囲に1ピクセルの白枠を付けたものをCVバッファに入れる
			gsel kFlashBufferID
			color 100, 100, 100
			boxf 1, 1, kFlashWX, kFlashWY
			cvbuffer kCVFlashBufferID, kFlashWX, kFlashWY
			cvputimg kCVFlashBufferID
			// マッチング処理を行う
			cvmatch flash_position(0), flash_position(1), CV_TM_SQDIFF, kCVFlashBufferID, kCVDesktopBufferID
			// 「1ピクセルの白枠」の分だけ補正処理を行う
			flash_position(0) += 1
			flash_position(1) += 1
		return
		// 指定した点におけるウィンドウのハンドルを取得する
		#defcfunc GetWindowHandle array flash_point
		return WindowFromPoint(flash_point(0), flash_point(1))
		// 指定したハンドルにおけるオフセットとサイズを取得する
		#deffunc GetWindowParam int window_handle, array window_param
			dim rect, kRectDim
			GetWindowRect window_handle, varptr(rect)
			window_param(0) = rect(0)
			window_param(1) = rect(1)
			window_param(2) = rect(2) - rect(0)
			window_param(3) = rect(3) - rect(1)
		return
		// ウィンドウのスクリーンショットを取得する
		#deffunc WindowScreenShot int window_buffer_id, int window_handle, array window_param
			;保存用のバッファを初期化する
			buffer window_buffer_id, window_param(2), window_param(3)
			;ウィンドウのデバイスコンテキストを作成する
			hdc_window = GetWindowDC(window_handle)
			;ウィンドウの画像をコピーする
			BitBlt hdc, 0, 0, window_param(2), window_param(3), hdc_window, 0, 0, SRCCOPY; | CAPTUREBLT
			;デバイスコンテキストを削除する
			ReleaseDC window_handle, hdc_window
		return
		// 艦これの画面のスクリーンショットを取得する
		#deffunc FlashScreenShot int flash_buffer_id, int window_handle, array flash_position
			gsel flash_buffer_id
			;デスクトップのデバイスコンテキストを作成する
			hdc_window = GetWindowDC(window_handle)
			;デスクトップの画像をコピーする
			BitBlt hdc, 0, 0, kFlashWX, kFlashWY, hdc_window, flash_position(0), flash_position(1), SRCCOPY; | CAPTUREBLT
			;デバイスコンテキストを削除する
			ReleaseDC window_handle, hdc_window
		return
		// 艦これの画面のスクリーンショットを取得する(旧形式)
		#deffunc FlashScreenShotOld int flash_buffer_id, array flash_position
			gsel flash_buffer_id
			;デスクトップのデバイスコンテキストを作成する
			hdc_screen = CreateDC ("DISPLAY", NULL, NULL, NULL)
			;デスクトップの画像をコピーする
			BitBlt hdc, 0, 0, kFlashWX, kFlashWY, hdc_screen, flash_position(0), flash_position(1), SRCCOPY; | CAPTUREBLT
			;デバイスコンテキストを削除する
			DeleteDC hdc_screen
		return
		// 艦これの画面がズレていないかを判定する
		#defcfunc CheckMoveFlash int window_handle, array flash_position
			gsel kCheckBufferID
			;デスクトップのデバイスコンテキストを作成する
			hdc_window = GetWindowDC(window_handle)
			;デスクトップの画像をコピーする
			BitBlt hdc, 0, 0, kFlashWX + 2, kFlashWY + 2, hdc_window, flash_position(0) - 1, flash_position(1) - 1, SRCCOPY; | CAPTUREBLT
			;デバイスコンテキストを削除する
			ReleaseDC window_handle, hdc_window
			;RGB値で判定する。四隅と各辺の中央の色を取得し、1つでも違うものがあればアウト
			dim clr, 8
			for k, 0, 8
				pget check_x@(k), check_y@(k)
				clr(k) = (ginfo_r * 1000 + ginfo_g) * 1000 + ginfo_b
			next
			auto_set_flg = FALSE
			if((clr(0) != clr(1)) && (clr(1) == clr(2))){
				flash_position(0) += move_x@(0)
				flash_position(1) += move_y@(0)
				auto_set_flg = TRUE
			}else{
				for k, 1, 8
					if(clr(0) != clr(k)){
						flash_position(0) += move_x@(k)
						flash_position(1) += move_y@(k)
						auto_set_flg = TRUE
						_break
					}
				next
			}
		return auto_set_flg
		// 艦これの画面がズレていないかを判定する(旧形式)
		#defcfunc CheckMoveFlashOld array flash_position
			gsel kCheckBufferID
			;デスクトップのデバイスコンテキストを作成する
			hdc_screen = CreateDC ("DISPLAY", NULL, NULL, NULL)
			;デスクトップの画像をコピーする
			BitBlt hdc, 0, 0, kFlashWX + 2, kFlashWY + 2, hdc_screen, flash_position(0) - 1, flash_position(1) - 1, SRCCOPY; | CAPTUREBLT
			;デバイスコンテキストを削除する
			DeleteDC hdc_screen
			;RGB値で判定する。四隅と各辺の中央の色を取得し、1つでも違うものがあればアウト
			dim clr, 8
			for k, 0, 8
				pget check_x@(k), check_y@(k)
				clr(k) = (ginfo_r * 1000 + ginfo_g) * 1000 + ginfo_b
			next
			auto_set_flg = FALSE
			if((clr(0) != clr(1)) && (clr(1) == clr(2))){
				flash_position(0) += move_x@(0)
				flash_position(1) += move_y@(0)
				auto_set_flg = TRUE
			}else{
				for k, 1, 8
					if(clr(0) != clr(k)){
						flash_position(0) += move_x@(k)
						flash_position(1) += move_y@(k)
						auto_set_flg = TRUE
						_break
					}
				next
			}
		return auto_set_flg
	#global

	#module _tasktray
		// APIを呼び出すための宣言
		#uselib "Shell32.dll"
			#func Shell_NotifyIcon "Shell_NotifyIconA" int, var
			#func ExtractIconEx "ExtractIconExA" sptr, int, nullptr, var, int
		#uselib "Kernel32.dll"
			#func GetModuleFileName "GetModuleFileNameA" nullptr, var, int
		// APIを呼び出すための定数宣言
		#const global WM_TRAYEVENTSTART $8000 + 1
		// タスクトレイにアイコンを登録する
		// Tasktray ツールチップ文字列, アイコンを含むファイルのパス
		#deffunc Tasktray str tip, str fName_
			tt_handle = hwnd
			// fNameに関する補完処理
			fName = ""
			if(fName_ == "") :GetModuleFileName fName, 1024 :else :fName = fName_
			// APIに投げるための構造体データを作成
			dim NOTIFYICONDATA,88 / 4
			NOTIFYICONDATA(0) = 88
			NOTIFYICONDATA(1) = tt_handle
			NOTIFYICONDATA(2) = 0
			NOTIFYICONDATA(3) = 7
			NOTIFYICONDATA(4) = WM_TRAYEVENTSTART
			ExtractIconEx fName, 0, NOTIFYICONDATA(5), 1
			poke NOTIFYICONDATA, 4*6, tip
			Shell_NotifyIcon 0, NOTIFYICONDATA
		return stat
		// タスクトレイのアイコンを削除する
		#deffunc TasktrayDel
		if(length(NOTIFYICONDATA) == (88 / 4)){
			NOTIFYICONDATA(3) = 0
			Shell_NotifyIcon 2, NOTIFYICONDATA
		}
		return
		// タスクトレイからバルーン通知を出す
		// TasktrayPopup bInfo,bInfoTitle,tIcon,time
		// bInfo : バルーンに表示するメッセージ
		// bInfoTitle : バルーンのタイトル
		// tIcon : アイコンの種類[ 0:無し 1:情報(i) 2:警告(!) 3:エラー(X) ]
		// time : タイムアウト値（1/1000秒単位）
		#deffunc TasktrayPopup str bInfo, str bInfoTitle, int tIcon, int time
			dim NOTIFYICONDATA,488 / 4
			NOTIFYICONDATA(0) = 488
			NOTIFYICONDATA(1) = tt_handle
			NOTIFYICONDATA(2) = 0
			NOTIFYICONDATA(3) = $10
			poke NOTIFYICONDATA, 4 * 40, bInfo
			NOTIFYICONDATA(104) = time
			poke NOTIFYICONDATA, 4 * 105, bInfoTitle
			NOTIFYICONDATA(121) = tIcon
			Shell_NotifyIcon 1, NOTIFYICONDATA
		return
		#deffunc TasktrayPopup2 str bInfo, str bInfoTitle, int tIcon, int time
			Tasktray kSoftName, ""
			TasktrayPopup bInfo, bInfoTitle, tIcon, time
			TasktrayDel
		return
	#global
