#runtime "hsp3cl"
#packopt name "convert"
#const global kSupplyLogBlockSize 28

// â¸çsÇ»Çµ mes
// http://blogs.yahoo.co.jp/kerupani/15291478.html
#module hspio
	#uselib "msvcrt.dll"
	#func putchar "putchar" int
	#deffunc mes2 str p1
		buf = p1
		for k, 0, strlen(buf)
			putchar peek(buf, k)
		next
	return
#global

notesel text_buffer
noteload dir_cmdline
sdim buf, notemax * kSupplyLogBlockSize
count = 0
p = 0
repeat notemax - 1, 1
	if(time != gettime(6)){
		mes2 "\r" + (cnt + 1) + "/" + notemax
		time = gettime(6)
	}
	noteget get, cnt
	split get, ",", temp

	strrep temp(0), "-", " "
	strrep temp(0), ":", " "
	strrep temp(0), "/", " "
	split temp(0), " ", temp2
	num = stat
	v1 = int(temp2(0))
	v2 = int(temp2(1))
	v3 = int(temp2(2))
	v4 = int(temp2(3))
	v5 = int(temp2(4))
	v6 = int(temp2(5))
	wpoke buf, p, v1 :p += 2
	poke  buf, p, v2 :p += 1
	poke  buf, p, v3 :p += 1
	poke  buf, p, v4 :p += 1
	poke  buf, p, v5 :p += 1
	poke  buf, p, v6 :p += 1

	lpoke buf, p, int(temp(1)) :p += 4
	lpoke buf, p, int(temp(2)) :p += 4
	lpoke buf, p, int(temp(3)) :p += 4
	lpoke buf, p, int(temp(4)) :p += 4

	wpoke buf, p, int(temp(5)) :p += 2
	wpoke buf, p, int(temp(6)) :p += 2
	poke  buf, p, int(temp(7)) :p += 1
	count++
loop
bsave dir_cmdline + ".dat", buf, count * kSupplyLogBlockSize
end
