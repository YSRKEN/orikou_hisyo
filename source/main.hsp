/*
* SoftWareName(Jp) : おりこうさんな秘書
* SoftWareName(En) : orikou_hisyo
* Version          : 3.4.3
* Author           : YSR
* License          : MIT
* Copyright(C) 2015 YSR
*/

/* ソフトウェア情報 */
	#packopt name "orikou"
	#define global kSoftName   "おりこうさんな秘書"
	#define kVersion    "Ver.3.4.3"
	#define kVerString  "343"
	#define kLastUpdate "2017/09/19"
	#pack "area_exp.csv"
	#pack "scene_list.csv"
	#pack "expedition.csv"
	#pack "exp_table.csv"
	#pack "sort_type.csv"
	#cmpopt ppout 1

/* ライブラリ・サブルーチン */
	// 他作
	#include "a2d.hsp"
	#include "hspcv.as"
	#include "hspext.as"
	#include "hspinet.as"
	#include "module_lwm2.hsp"
	#include "keyhook.hsp"
	#include "clipboard.as"
	// 自作
	#include "const.hsp"
	#include "module_api.hsp"
	#include "module_chkver.hsp"
	#include "module_misc.hsp"
	#include "module_file.hsp"
	#include "module_ocr.hsp"
	#include "module_pic.hsp"
	#include "module_time.hsp"
	#include "module_fileinfo.hsp"
	LoadSystemData
	#include "interface.hsp"
	LoadSoftData
	gosub *make_main_window
	gosub *draw_supply_graph
	onexit gosub *exit
	onclick gosub *move
	goto *main
	#include "event_misc.hsp"
	#include "event_getpos.hsp"
	#include "event_picsave.hsp"
	#include "event_timer.hsp"
	#include "event_sort.hsp"
	#include "event_exp.hsp"
	#include "event_counter.hsp"
	#include "event_cond.hsp"
	#include "event_supply.hsp"
	#include "event_bgm.hsp"
	#include "event_mascot.hsp"
	#include "event_task.hsp"
	#include "event_fleetinfo.hsp"
/* メインルーチン */
*main
	MakeSubWindow
	if(position_save_flg) :gsel kSubWindowID :width ,,sub_window_posx, sub_window_posy
	show_window(kSubWindowID) = TRUE
	gosub *cond_enable
	gosub *redraw_cond
	gosub *redraw_counter
	gosub *redraw_bgm_window
	gosub *redraw_task_window
	GselMain
	if(mascot_index_id >= 0){
		if(desktop_mascot_flg){
			gsel kMainWindowID, -1
			gosub *show_mascot
		}
	}
	// 状態変化検出用変数
	sub_window_size_index_ = sub_window_size_index	//サブ画面のサイズを変えたか否か
	show_status_flg_ = show_status_flg	//ステータスを表示するか否か
	old_getpos_flg_ = old_getpos_flg	//座標取得方式を変えたか否か
	pre_scene_name = ""			//前のシーンの名前
	show_stopper_flg1 = FALSE	//進撃/出撃ストッパーの画面を出せる状態ならTRUE
	show_stopper_flg2 = FALSE	//進撃/出撃ストッパーの画面を出していたらTRUE
	show_locker_flg1 = FALSE	//ロックストッパーの画面を出せる状態ならTRUE
	show_locker_flg2 = FALSE	//ロックストッパーの画面を出していたらTRUE
	sort_index_ = sort_index
	sort_kind_ = sort_kind
	next_level_flg_ = next_level_flg
	fleetinfo_number_index_ = fleetinfo_number_index
	dim cond_, kUnitNum
	for k, 0, kUnitNum
		cond_(k) = cond(k)
	next
	cond_step_ = cond_step
	auto_calc_flg_ = auto_calc_flg
	bgm_type_now_ = bgm_type_now
	graph_scale_index_ = graph_scale_index + 1	//最初に必ず画面を更新させる
	redraw_counter_flg = FALSE
	desktop_mascot_flg_ = desktop_mascot_flg
	show_mascot_area_flg_ = show_mascot_area_flg
	browser_front_flg_ = 1 - browser_front_flg
	mascot_index_ = mascot_index
	main_width_index_ = main_width_index
	khHook *shortcut
	// バージョンチェック
	latest_ver = ""
	if(check_ver_type == 0){
		// 初めてバージョンチェックするので確認を取る
		dialog "今後起動時に更新チェックを行いますか？", 2, kSoftName
		if(stat == 6){
			check_ver_type = 1
		}else{
			check_ver_type = 2
		}
		gsel kOptionWindowID
		objprm check_ver_index_id, check_ver_type
		GselMain
	}
	if(check_ver_type == 1){
		// 更新チェックを行う
		PutLog "【更新チェック】"
		latest_ver = GetLatestVer()
		if(kVersion != latest_ver){
			if(latest_ver != ""){
				PutLog "更新が見つかりました。"
				PutLog "現在版：" + kVersion
				PutLog "最新版：" + latest_ver
				dialog "現在版：" + kVersion + "\n最新版：" + latest_ver + "\n配布サイトを開きますか？", 2, kSoftName
				if(stat == 6){
					exec "https://github.com/YSRKEN/orikou_hisyo/releases/latest", , "open"
				}
			}else{
				PutLog "チェックできませんでした。"
			}
		}else{
			PutLog "現在版が最新です。"
		}
	}
	// メインループ
	repeat
		if(exit_flg) :end
		// 座標取得した場合のみ行う処理
		if(get_pos_flg){
			// 艦これの画面のスクリーンショットを取得する
			if(old_getpos_flg == FALSE){
				FlashScreenShot kMainBufferID, window_handle, flash_position
			}else{
				FlashScreenShotOld kMainBufferID, flash_position
			}
			flash_time = GetFloatTime()
			// 取得したものについて、どういったシーンかを判定する
			scene_result_index = JudgeSituation(kMainBufferID, scene_result)
			gsel kSubWindowID
			title scene_result(0) + "　" + scene_result(1)
			// 判定したシーンをバッファにコピーする
			if(scene_result_index < scene_list_size){
				if(show_scene_list_index(scene_result_index) >= 0){
					gsel kSceneBufferID + show_scene_list_index(scene_result_index)
					gcopy kMainBufferID, 0, 0, kFlashWX, kFlashWY
					show_scene_list_time(show_scene_list_index(scene_result_index)) = flash_time
				}
			}
			// 対象ウィンドウの座標を随時監視する
			gosub *check_pos
			// 記録された画像から艦隊数を取得する
			GetUnits unit_count
			// 大破・消耗・特殊チェック
			gosub *check_stopper
			// ロックチェック
			gosub *check_locker
			// ソート一覧で選択位置が変わった際に表示する画像を変更する
			gosub *redraw_sort_preview
			// 精度面の問題から、勝利判定は常時行うようにする
			// (判定できない＝D以下と判定されるので、最大評価を取る)
			if(win_judge_window_id != -1){
				if(scene_result(1) == "戦闘判定"){
					battle_rank_ = JudgeBattleRank()
					if(battle_rank > battle_rank_) :battle_rank = battle_rank_
				}else{
					if((scene_result(1) != "戦果報告") && (scene_result(1) != "不明")){
						battle_rank = kBattleRankD
					}
				}
			}
			// 資材ログ機能
			gosub *put_supply_log
			// ソート一覧機能の切り替え操作
			if(sort_kind_ != sort_kind){
				gsel kSortListWindowID
				if(sort_list_size(sort_kind) == 0){
					title "ソート一覧(" + sort_kind_name(sort_kind) + ")"
				}else{
					title "ソート一覧(" + sort_kind_name(sort_kind) + "," + sort_list_size(sort_kind) + "枚)"
				}
				objprm sort_index_id, sort_list(sort_kind)
				sort_index = -1
				objprm sort_index_id, sort_index
				sort_kind_ = sort_kind
			}
			// BGM切り替え
			if(bgm_type_now_ != bgm_type_now){
				gosub *change_bgm
				bgm_type_now_ = bgm_type_now
			}
			// 「戦闘画面」にチェックが入っている際は自動切り替え
			if(show_battle_flg && battle_index(0) != -1 && battle_index(1) != -1){
				if(scene_list_index != battle_index(0) + 1){
					if(scene_result(1) == "昼戦画面"){
						GselMain
						objprm scene_list_id, battle_index(0) + 1
					}
				}
				if(scene_list_index != battle_index(1) + 1){
					if(scene_result(1) == "夜戦画面"){
						GselMain
						objprm scene_list_id, battle_index(1) + 1
					}
				}
			}
			// 定期的に設定を保存しておく
			if(flash_time - autosave_last_time >= kAutoSaveInterval){
				autosave_last_time = flash_time
				SaveSoftData FALSE
			}
			// シーンが切り替わった際に行う処理
			if((pre_scene_name != scene_result(1)) && (scene_result(1) != "不明")){
				gosub *check_scene_change
				pre_scene_type = scene_result(0)
				pre_scene_name = scene_result(1)
			}
			// 定期的に任務一覧を更新する
			if(flash_time - task_start_time >= kTaskInterval){
				task_start_time = flash_time
				gosub *redraw_task_window
			}
			// 随伴艦一括解除ボタン用
			gsel kMainBufferID
			if(scene_result(1) == "随伴艦一括解除"){
				last_preset_time = flash_time
			}
			if(time != gettime(6)){
				time = gettime(6)
				// 各種タイマーを更新
				gosub *check_timer
				gosub *redraw_timer
			}
		}
		// 座標取得に関わらず行う処理
		//サブ画面のサイズが変更になった場合の処理
		if(sub_window_size_index_ != sub_window_size_index){
			MakeSubWindow
			sub_window_size_index_ = sub_window_size_index
		}
		//サブ画面におけるステータスバーの表示切り替え
		if(show_status_flg_ != show_status_flg){
			MakeSubWindow
			show_status_flg_ = show_status_flg
		}
		//サブ画面上の表示を更新する
		;表示したい画面を一旦別のバッファに送る(各種処理の準備)
		gsel kSubBufferID
		if(scene_list_index == 0){
			gcopy kMainBufferID, 0, 0, kFlashWX, kFlashWY
		}else{
			gcopy kSceneBufferID + scene_list_index - 1, 0, 0, kFlashWX, kFlashWY
		}
		sdim scene_result2, 64, kPosDim
		scene_result_index2 = JudgeSituation(kSubBufferID, scene_result2)
		;名前隠し処理を行う
		if(name_disable_flg){
			gosub *name_disable_filter
		}
		;サブ画面に、選択したシーンを表示する
		SetSubWindow
		//サブ画面下の表示を更新する
		gosub *redraw_status_bar
		//経験値計算機の更新処理
		gosub *check_exp_calc
		// ○号カウンタの更新処理
		if(redraw_counter_flg){
			gosub *redraw_counter
			redraw_counter_flg = FALSE
		}
		//cond値メータの更新処理
		redraw_cond_flg = FALSE
		for k, 0, kUnitNum
			if(cond_(k) != cond(k)) :redraw_cond_flg = TRUE :_break
		next
		if(redraw_cond_flg){
			gosub *redraw_cond
			for k, 0, kUnitNum
				cond_(k) = cond(k)
			next
		}
		if(cond_step_ != cond_step) :gosub *cond_enable :cond_step_ = cond_step
		if(auto_calc_flg_ != auto_calc_flg) :gosub *redraw_cond :auto_calc_flg_ = auto_calc_flg
		//資材グラフの更新処理
		if(graph_scale_index_ != graph_scale_index){
			gosub *draw_supply_graph
			graph_scale_index_ = graph_scale_index
		}
		gosub *draw_supply_num
		//「戦闘画面」チェックに関する処理
		if(show_battle_flg_ != show_battle_flg && battle_index(0) != -1 && battle_index(1) != -1){
			if(show_battle_flg == FALSE){
				GselMain
				objprm scene_list_id, 0
			}else{
				if(show_scene_list_time(battle_index(0)) > show_scene_list_time(battle_index(1))){
					GselMain
					objprm scene_list_id, battle_index(0) + 1
				}else{
					GselMain
					objprm scene_list_id, battle_index(1) + 1
				}
			}
			show_battle_flg_ = show_battle_flg
		}
		// マスコット表示に切り替えるかのフラグ
		if(desktop_mascot_flg_ != desktop_mascot_flg){
			if(mascot_index_id >= 0){
				GselMain
				if(desktop_mascot_flg){
					gosub *show_mascot
				}else{
					gsel kMascotWindowID, -1
					gsel kMainWindowID, 2
					objprm show_battle_id, show_battle_flg
					gsel kMainWindowID, 2
				}
			}
			desktop_mascot_flg_ = desktop_mascot_flg
		}
		if(show_mascot_area_flg_ != show_mascot_area_flg){
			if(desktop_mascot_flg){
				gosub *redraw_mascot
			}
			show_mascot_area_flg_ = show_mascot_area_flg
		}
		if(mascot_index_ != mascot_index){
			if(desktop_mascot_flg){
				gsel kMainWindowID, -1
				gosub *show_mascot
			}
			mascot_index_ = mascot_index
		}
		// メイン画面の幅を変更する
		if(main_width_index_ != main_width_index){
			gosub *make_main_window
			main_width_index_ = main_width_index
		}
		// 内蔵ブラウザの最前面表示
		if(show_window(kBrowserWindowID)){
			if(browser_front_flg_ != browser_front_flg){
				if(browser_front_flg){
					gsel kBrowserWindowID, 2
				}else{
					gsel kBrowserWindowID, 1
				}
				browser_front_flg_ = browser_front_flg
			}
		}
		// 艦隊情報画面
		if(fleetinfo_number_index_ != fleetinfo_number_index){
			gosub *get_fleetinfo
			fleetinfo_number_index_ = fleetinfo_number_index
		}
		if(time2 != gettime(6)){
			time2 = gettime(6)
			if(desktop_mascot_flg@) :gsel kMainWindowID, -1	//ヤケクソ
		}
		// ウェイト
		await 1000 / capture_fps(capture_fps_index)
	loop

/* 終了ボタンが押された際の判定 */
*exit
	if((wparam == kMainWindowID) || (wparam == kSubWindowID)){
		dialog "終了しますか？", 2, kSoftName
		if(stat == 6){
			exit_save_flg = TRUE :gosub *put_supply_log	//強制的にログを保存する
			SaveSoftData TRUE
			GselMain
			TasktrayDel
			exit_flg = TRUE
		}
	}else{
		gsel wparam, -1
		if(wparam < kSavePositions){
			show_window(wparam) = FALSE
		}
	}
return

/* マウスでウィンドウをドラッグできるようにする */
*move
	if(wparam == 1){
		if(ginfo_act < kSelectWindowID){
			if(ginfo_act == kMascotWindowID){
				gosub *run_event
			}else{
				sendmsg hwnd_window(ginfo_act), WM_NCLBUTTONDOWN, HTCAPTION, 0
			}
		}
		if(ginfo_act == kStopperWindowID){
			dialog "現在、進撃・出撃を制限されています。\nそれでも進撃・出撃を行いますか？", 3, kSoftName
			if(stat == 6){
				dialog "本当に進撃・出撃してよろしいですね？", 3, kSoftName
				if(stat == 6){
					gsel kStopperWindowID, -1
					PutLog "【警告】"
					PutLog "ストッパーが強制解除されました"
					if(stopper_type == kStopperDeadZone){
						show_stopper_flg1 = FALSE
						show_stopper_flg2 = FALSE
					}
				}
			}
		}
		if(ginfo_act == kLockerWindowID){
			dialog "現在、ロック操作が制限されています。\nそれでもロック操作を行いますか？", 3, kSoftName
			if(stat == 6){
				gsel kLockerWindowID, -1
				PutLog "【報告】"
				PutLog "ロック操作への制限が解除されました"
			}
		}
	}
return

/* Alt+Zでスクショが保存できるようにする */
*shortcut
	if(khKeyCode == 18){
		if(khStat != 3) :alt_key_flg = TRUE :else :alt_key_flg = FALSE
	}
	if(khKeyCode == 90){
		if(khStat != 3) :z_key_flg = TRUE :else :z_key_flg = FALSE
	}
	if(alt_key_flg && z_key_flg){
		if(shortcut_save_flg != TRUE){
			if(shortcut_command_flg) :gosub *save_picture
			shortcut_save_flg = TRUE
		}
	}else{
		shortcut_save_flg = FALSE
	}
return
