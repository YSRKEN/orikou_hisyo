/* その他種々のイベント処理 */

//*情報表示
*about
	sdim about_info, 1024
	// ソフトウェア情報
	about_info += "ソフト名：" + kSoftName + "\n"
	about_info += "バージョン：" + kVersion + "\n"
	about_info += "作者：YSR\n"
	about_info += "最終更新日：" + kLastUpdate + "\n"
	// 練度表示
	if((scene_result(0) == "編成画面") && (strmid(scene_result(1), 0, 2) == "第")){
		dim level_temp, kUnitNum
		// 画像から練度を読み取る
		for k, 0, kUnitNum
			gsel kMainBufferID
			x = k \ 2
			y = k / 2
			pget 342 * x + 256, 113 * y + 153
			if(ginfo_r >= 128){
				level_temp(k) = 100
			}else{
				level_temp(k) = 0
			}
			dim number, 2
			unit_pos_x_.0 = 342 * x + unit_pos_x(0), 342 * x + unit_pos_x(1)
			ReadNumber number, 2, unit_pos_x_, 113 * y + 149, 8, 12, 85, TRUE
			NormalizeLevel number
			level_temp(k) += number(0) * 10 + number(1)
		next
		about_info += "旗艦連度：" + level_temp(0) + "\n"
		sum = 0
		for k, 0, kUnitNum
			sum += level_temp(k)
		next
		about_info += "艦隊総連度：" + sum + "\n"
	}
	dialog about_info
return

//*メイン画面の作成
*make_main_window
	switch main_width_index
	case 0
		// 3列表示
		if(main_pulldown_flg){
			screen kMainWindowID, POS_X(3), POS_Y(13)
		}else{
			screen kMainWindowID, POS_X(3), POS_Y(9)
		}
		if(desktop_mascot_flg) :gsel kMainWindowID, -1
		title kSoftName
		GselMain
		if(main_pulldown_flg){
			POS_XY 0, 8
		}else{
			POS_XY 0, 4
		}
			mesbox soft_log, SIZE_X(3), SIZE_Y(5), 4
			hMesBox = objinfo(stat, 2)
		objsize SIZE_X(1), SIZE_Y(1)
			POS_XY 0, 0
				combox get_pos_mode,,"オート\nクリック\nクロップ\nマニュアル"
					get_pos_mode_id = stat
			POS_XY 1, 0
				button gosub "座標取得", *get_pos
			POS_XY 2, 0
				button gosub "【画像保存】", *save_picture
			POS_XY 2, 1
				button gosub "【トリミング】", *save_picture_trim
			POS_XY 0, 2
				button gosub "オプション...", *show_option
			POS_XY 1, 2
				combox save_fleet_index,,"第１艦隊\n第２艦隊\n第３艦隊\n第４艦隊\n連合艦隊\n支援艦隊"
			POS_XY 2, 2
				button gosub "【艦隊画像】", *save_fleet
			POS_XY 1, 3
				chkbox "戦闘画面", show_battle_flg
					show_battle_id = stat
			POS_XY 2, 3
				button gosub "各種情報", *about
			if(main_pulldown_flg){
				POS_XY 0, 3
					button gosub "↑↑↑↑", *change_pulldown
				POS_XY 0, 4
					button gosub "各種タイマー", *show_timer
				POS_XY 1, 4
					button gosub "ソート一覧", *show_sort_list
				POS_XY 2, 4
					button gosub "資材グラフ", *show_supply_graph
				POS_XY 0, 5
					button gosub "経験値計算機", *show_exp_calc
				POS_XY 1, 5
					button gosub "○号カウンタ", *show_counter
				POS_XY 2, 5
					button gosub "cond値メータ", *show_cond_meter
				POS_XY 0, 6
					button gosub "BGM機能", *show_bgm_window
				POS_XY 1, 6
					button gosub "外蔵ブラウザ", *show_browser
				POS_XY 2, 6
					button gosub "任務一覧", *show_task_window
				POS_XY 0, 7
					button gosub "艦隊情報", *show_fleetinfo_window
			}else{
				POS_XY 0, 3
					button gosub "↓↓↓↓", *change_pulldown
			}
		objsize SIZE_X(2), SIZE_Y(1)
			POS_XY 0, 1
				combox scene_list_index,,scene_list_str
					scene_list_id = stat
		hwnd_window(kMainWindowID) = hwnd
		show_window(kMainWindowID) = TRUE
		swbreak
	case 1
		// 2列表示
		if(main_pulldown_flg){
			screen kMainWindowID, POS_X(2), POS_Y(16)
		}else{
			screen kMainWindowID, POS_X(2), POS_Y(11)
		}
		title kSoftName
		GselMain
		if(main_pulldown_flg){
			POS_XY 0, 11
		}else{
			POS_XY 0, 6
		}
			mesbox soft_log, SIZE_X(2), SIZE_Y(5), 4
			hMesBox = objinfo(stat, 2)
		objsize SIZE_X(1), SIZE_Y(1)
			POS_XY 0, 0
				combox get_pos_mode,,"オート\nクリック\nクロップ\nマニュアル"
					get_pos_mode_id = stat
			POS_XY 1, 0
				button gosub "座標取得", *get_pos
			POS_XY 0, 2
				button gosub "【トリミング】", *save_picture_trim
			POS_XY 1, 2
				button gosub "【画像保存】", *save_picture
			POS_XY 0, 3
				combox save_fleet_index,,"第１艦隊\n第２艦隊\n第３艦隊\n第４艦隊\n連合艦隊\n支援艦隊"
			POS_XY 1, 3
				button gosub "【艦隊画像】", *save_fleet
			POS_XY 0, 4
				button gosub "オプション...", *show_option
			POS_XY 1, 4
				chkbox "戦闘画面", show_battle_flg
					show_battle_id = stat
			POS_XY 1, 5
				button gosub "各種情報", *about
			if(main_pulldown_flg){
				POS_XY 0, 5
					button gosub "↑↑↑↑", *change_pulldown
				POS_XY 0, 6
					button gosub "各種タイマー", *show_timer
				POS_XY 1, 6
					button gosub "ソート一覧", *show_sort_list
				POS_XY 0, 7
					button gosub "資材グラフ", *show_supply_graph
				POS_XY 1, 7
					button gosub "経験値計算機", *show_exp_calc
				POS_XY 0, 8
					button gosub "○号カウンタ", *show_counter
				POS_XY 1, 8
					button gosub "cond値メータ", *show_cond_meter
				POS_XY 0, 9
					button gosub "BGM機能", *show_bgm_window
				POS_XY 1, 9
					button gosub "外蔵ブラウザ", *show_browser
				POS_XY 0, 10
					button gosub "任務一覧", *show_task_window
				POS_XY 1, 10
					button gosub "艦隊情報", *show_fleetinfo_window
			}else{
				POS_XY 0, 5
					button gosub "↓↓↓↓", *change_pulldown
			}
		objsize SIZE_X(2), SIZE_Y(1)
			POS_XY 0, 1
				combox scene_list_index,,scene_list_str
					scene_list_id = stat
		hwnd_window(kMainWindowID) = hwnd
		show_window(kMainWindowID) = TRUE
		swbreak
	swend
return

//*プルダウン表示の切り替え
*change_pulldown
	main_pulldown_flg = 1 - main_pulldown_flg
	gosub *make_main_window
return

//*シーンが切り替わった際に行う処理
*check_scene_change
	// ○号カウンタ
	//演習中であることを検出する
	if((scene_result(0) == "演習出撃") && (scene_result(1) == "陣形選択")){
		exercises_flg = TRUE
	}
	if(scene_result(0) == "母港画面"){
		exercises_flg = FALSE
	}
	//イベント海域の出撃用意であることを検出する
	if(scene_result(1) == "大淀"){
		if(scene_result(0) == "海域出撃"){
			oyodo_flg = TRUE
		}
	}
	if(scene_result(0) == "母港画面"){
		oyodo_flg = FALSE
		logmes "oyodo_flg=" + oyodo_flg
	}
	//自動カウント処理
	gosub *counter_auto
	// BGM機能(現在の状況を更新する)
	gosub *check_bgm_type
	// 各種タイマー
	if((scene_result(0) == "母港画面") && (scene_result(1) == "通常画面")){
		time_diff = flash_time - akashi_start_time
		if(time_diff >= kAkashiInterval){
			// 明石タイマー作動
			akashi_start_time = GetFloatTime()
			PutLog "【明石タイマー】"
			PutLog "タイマーをセットしました。"
		}
	}
	if(pre_scene_name == "編成展開"){
		// 編成展開による変化
		last_preset_time = flash_time
	}
	// 疲労回復タイマー周りの処理
	if(win_judge_window_id != -1){
		//帰投時にcond値-15(便宜上出撃時にタイマー開始)
		if((pre_scene_type == "海域出撃") && (pre_scene_name == "艦隊選択") && (scene_result(1) == "出撃画面")){
			if(exercises_flg == FALSE){
				// 疲労回復タイマースタート
				fatigue_timer_start_time = GetFloatTime()
				fatigue_timer_flg = TRUE
				fatigue_timer_done_interval = limit(fatigue_timer_done_interval + kFatigueInterval, 0, 49)	//Cond値0未満はありえないので
			}
		}
		//昼戦突入時はcond値-3
		if((pre_scene_name == "海域マップ") && (scene_result(1) == "昼戦画面")){
			fatigue_timer_done_interval = limit(fatigue_timer_done_interval + 3, 0, 49)
		}
		//夜戦突入時はcond値-2
		if((pre_scene_name == "海域マップ") && (scene_result(1) == "夜戦画面")){
			fatigue_timer_done_interval = limit(fatigue_timer_done_interval + 2, 0, 49)
		}
		if((pre_scene_name == "夜戦確認") && (scene_result(1) == "夜戦画面")){
			fatigue_timer_done_interval = limit(fatigue_timer_done_interval + 2, 0, 49)
		}
		logmes "" + pre_scene_name + "->" + scene_result(1)
		if((pre_scene_name == "戦闘判定") && (scene_result(1) == "戦果報告")){
			//S勝利時はcond値+4
			if(battle_rank == kBattleRankS){
				fatigue_timer_done_interval = limit(fatigue_timer_done_interval - 4, 0, 49)
			}
			//A勝利時はcond値+3
			if(battle_rank == kBattleRankA){
				fatigue_timer_done_interval = limit(fatigue_timer_done_interval - 3, 0, 49)
			}
			//B勝利時はcond値+2
			if(battle_rank == kBattleRankB){
				fatigue_timer_done_interval = limit(fatigue_timer_done_interval - 2, 0, 49)
			}
			//C勝利時はcond値+1
			if(battle_rank == kBattleRankC){
				fatigue_timer_done_interval = limit(fatigue_timer_done_interval - 1, 0, 49)
			}
		}
	}
	// 音声通知
	if((scene_result(0) == "出撃経過") && (scene_result(1) == "戦闘判定")){
		if(sound_alert_flg) :PlayAlert kAlertRes
	}else{
		if((scene_result(0) == "出撃経過") && (scene_result(1) == "夜戦確認")){
			if(sound_alert_flg) :PlayAlert kAlertSel
		}
	}
	// 任務一覧を、任務画面が開く度にリセットする
	if(pre_scene_type != scene_result(0)){
		if(pre_scene_type != "不明"){
			if(scene_result(0) == "任務画面"){
				for n, 0, scene_list_size
					if(scene_list_category(n) != "任務画面") :_continue
					if(instr(scene_list_name(n),,"ページ目") == -1) :_continue
					index = show_scene_list_index(n)
					if(index < 0) :_continue
					gsel kSceneBufferID + index
					color 255, 255, 255
					boxf
					show_scene_list_time(index) = 0.0
				next
			}
		}
	}
	// 艦隊情報画面を更新する
	if(auto_fleetinfo_flg){
		if((scene_result(0) == "改装画面") && (instr(scene_result(1),,"第" + fleet_2byte_arr(fleetinfo_number_index) + "艦隊") != -1)){
			gosub *get_fleetinfo
		}
	}
return

//*サブ画面下の表示を更新する
*redraw_status_bar
	if(show_status_flg == FALSE) :return
	gsel kSubWindowID
	redraw 0
		// 消去する
		color $FF, $FF, $FF
		boxf 0, sub_window_size_y@(sub_window_size_index@), sub_window_size_x@(sub_window_size_index@), sub_window_size_y@(sub_window_size_index@) + show_status_flg@ * status_y@(sub_window_size_index@)
		// 書き込むための内容を準備する
		;最終更新日時
		status_bar_str = ""
		if(scene_list_index == 0){
			status_bar_str += CnvStrTime(flash_time)
		}else{
			status_bar_str += CnvStrTime(show_scene_list_time(scene_list_index - 1))
		}
		;艦隊数
		status_bar_str + = " ("
		for k, 0, kFleetNum
			if(k != 0) :status_bar_str += ", "
			status_bar_str += "" + unit_count(k)
		next
		status_bar_str += ")"
		// 書き込む
		color
		pos 0, sub_window_size_y@(sub_window_size_index@) - 2
		font "Symbol", status_y@(sub_window_size_index@) - 2
		mes status_bar_str
	redraw 1
return

//*オプション画面を表示する
*show_option
	gsel kOptionWindowID, 2
	show_window(kOptionWindowID) = TRUE
return

//*外蔵ブラウザを表示する
*show_browser
	exec exe_path + "\\browser.exe"
return

//*画像の保存パスを指定する
*browse_pic
	selfolder pic_save_path(1),"保存先フォルダ"
	gsel kOptionWindowID
	objprm pic_save_path_id, pic_save_path(1)
return

//*名前隠し処理
//CheckHomeFlg関数とかでkMainBufferIDではなくkSubBufferIDを引数にしているのは、
//CheckHomeFlg関数が描画先を変更する関数なので、毎回gselするのが面倒だから
*name_disable_filter
	// 母港左上の提督名
	if(CheckHomeFlg(kSubBufferID)){
		color 38, 38, 38
		boxf 111, 0, 273, 25
	}
	// その他特殊な画面に対する処理
	if(scene_result2(1) == "艦隊司令部情報"){
		color 241, 234, 221
		boxf 201, 123, 496, 153
	}
	if(scene_result2(1) == "ランキング"){
		color 54, 54, 54
		boxf 225, 153, 375, 451
	}
	if(scene_result2(1) == "演習一覧"){
		color 225, 209, 181
		boxf 338, 178, 503, 192
		color 237, 223, 207
		boxf 338, 233, 503, 247
		color 225, 209, 181
		boxf 338, 288, 503, 302
		color 237, 223, 207
		boxf 338, 343, 503, 357
		color 225, 209, 181
		boxf 338, 398, 503, 412
	}
	if(scene_result2(1) == "演習個別"){
		color 246, 239, 228
		boxf 130, 87, 425, 117
	}
	if((scene_result2(1) == "交戦結果") || (scene_result2(1) == "戦闘判定")){
		color 37, 44, 47
		boxf 92, 82, 264, 106
	}
	if((scene_result2(0) == "出撃経過") && (scene_result2(1) == "戦果報告")){
		color 37, 44, 47
		boxf 56, 82, 228, 106
	}
	if((scene_result2(0) == "遠征出撃") && (scene_result2(1) == "戦果報告")){
		color 37, 44, 47
		boxf 65, 78, 237, 102
	}
return

//*大破・消耗・特殊チェック
*check_stopper
	ShowStopperWindow stopper_type	//ウィンドウ表示
	if(show_stopper_flg1){
		// 表示を無くすかどうかの判定
		if(show_stopper_flg2){
			if((check_deadzone_flg == FALSE) && (stopper_type == kStopperDeadZone)){
				show_stopper_flg1 = FALSE
				show_stopper_flg2 = FALSE
				gsel kStopperWindowID, -1
			}
			if((check_exhausted_flg == FALSE) && (stopper_type == kStopperExhausted)){
				show_stopper_flg1 = FALSE
				show_stopper_flg2 = FALSE
				gsel kStopperWindowID, -1
			}
			if((check_special_flg == FALSE) && (stopper_type == kStopperSpecial)){
				show_stopper_flg1 = FALSE
				show_stopper_flg2 = FALSE
				gsel kStopperWindowID, -1
			}
			if((check_expedition_flg == FALSE) && (stopper_type == kStopperExpedition)){
				show_stopper_flg1 = FALSE
				show_stopper_flg2 = FALSE
				gsel kStopperWindowID, -1
			}
			if((check_expedition_flg == FALSE) && (stopper_type == kStopperOfuda)){
				show_stopper_flg1 = FALSE
				show_stopper_flg2 = FALSE
				gsel kStopperWindowID, -1
			}
			if((CheckStopperType() == 0) && (scene_result(1) != "進撃確認")){
				show_stopper_flg1 = FALSE
				show_stopper_flg2 = FALSE
				gsel kStopperWindowID, -1
			}
		}else{
			if((check_deadzone_flg) && (stopper_type == kStopperDeadZone)){
				ShowStopperWindow stopper_type
			}
			if((check_exhausted_flg) && (stopper_type == kStopperExhausted)){
				ShowStopperWindow stopper_type
			}
			if((check_special_flg) && (stopper_type == kStopperSpecial)){
				ShowStopperWindow stopper_type
			}
			if((check_expedition_flg) && (stopper_type == kStopperExpedition)){
				ShowStopperWindow stopper_type
			}
			if((check_fuda_flg) && (stopper_type == kStopperOfuda)){
				ShowStopperWindow stopper_type
			}
		}
	}else{
		// まだ表示していない場合の処理
		stopper_type = CheckStopperType()
		switch stopper_type
			case kStopperDeadZone
				if(check_deadzone_flg){
					PutLog "【大破・消耗・特殊・遠征・札チェック】"
					PutLog "判定結果：大破状態"
					TasktrayPopup2 "艦娘が大破しています", kSoftName, 2, 1000
					show_stopper_flg1 = TRUE
				}
			swbreak
			case kStopperExhausted
				if(check_exhausted_flg){
					PutLog "【大破・消耗・特殊・遠征・札チェック】"
					PutLog "判定結果：消耗状態"
					TasktrayPopup2 "艦娘が消耗しています", kSoftName, 2, 1000
					show_stopper_flg1 = TRUE
				}
			swbreak
			case kStopperSpecial
				if(check_special_flg){
					PutLog "【大破・消耗・特殊・遠征・札チェック】"
					PutLog "判定結果：特殊状態"
					TasktrayPopup2 "設定により、進撃が中止されました", kSoftName, 2, 1000
					show_stopper_flg1 = TRUE
				}
			swbreak
			case kStopperExpedition
				if(check_expedition_flg){
					PutLog "【大破・消耗・特殊・遠征・札チェック】"
					PutLog "判定結果：遠征不可"
					TasktrayPopup2 "この艦隊は遠征条件を満たしていません", kSoftName, 2, 1000
					show_stopper_flg1 = TRUE
				}
			swbreak
			case kStopperOfuda
				logmes "" + check_fuda_flg + " " + oyodo_flg
				if(check_fuda_flg && oyodo_flg){
					PutLog "【大破・消耗・特殊・遠征・札チェック】"
					PutLog "判定結果：札追加！？"
					TasktrayPopup2 "新しくお札が付きますので確認ください", kSoftName, 2, 1000
					show_stopper_flg1 = TRUE
				}
			swbreak
		swend
	}
return

//*ロックチェック
*check_locker
	ShowLockerWindow locker_type	//ウィンドウ表示
	if(show_locker_flg1){
		// 表示を無くすかどうかの判定
		if(show_locker_flg2){
			locker_type = CheckLockerType()
			switch locker_type
				case kLockerKammusu
					gsel kLockerWindowID
					pos 0, 0
					gcopy kMainBufferID, 737, 154, 40, 280
					color 255, 0, 0
					DrawLargeSquare 0, 0, 40 - 1, 280 - 1
				swbreak
				case kLockerWeapon
					gsel kLockerWindowID
					pos 0, 0
					gcopy kMainBufferID, 770, 132, 30, 300
					color 255, 0, 0
					DrawLargeSquare 0, 0, 30 - 1, 300 - 1
				swbreak
			swend
			if((kammusu_lock_flg == FALSE) && (locker_type == kLockerKammusu)){
				show_locker_flg1 = FALSE
				show_locker_flg2 = FALSE
				gsel kLockerWindowID, -1
			}
			if((weapon_lock_flg == FALSE) && (locker_type == kLockerWeapon)){
				show_locker_flg1 = FALSE
				show_locker_flg2 = FALSE
				gsel kLockerWindowID, -1
			}
			if(CheckLockerType() == 0){
				show_locker_flg1 = FALSE
				show_locker_flg2 = FALSE
				gsel kLockerWindowID, -1
			}
		}else{
			if(((kammusu_lock_flg) && (stopper_type == kLockerKammusu)) || ((weapon_lock_flg) && (stopper_type == kLockerWeapon))){
				ShowLockerWindow locker_type
			}
		}
	}else{
		// まだ表示していない場合の処理
		locker_type = CheckLockerType()
		switch locker_type
			case kLockerKammusu
				if(kammusu_lock_flg){
					show_locker_flg1 = TRUE
				}
			swbreak
			case kLockerWeapon
				if(weapon_lock_flg){
					show_locker_flg1 = TRUE
				}
			swbreak
		swend
	}
return
